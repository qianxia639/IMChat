// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_login_log.sql

package db

import (
	"context"
)

const addUserLoginLog = `-- name: AddUserLoginLog :one
INSERT INTO user_login_logs (
    user_id, login_ip, login_ip_region, is_login_exceptional, platform, user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, login_time, login_ip, login_ip_region, is_login_exceptional, platform, user_agent
`

type AddUserLoginLogParams struct {
	UserID             int32  `json:"user_id"`
	LoginIp            string `json:"login_ip"`
	LoginIpRegion      string `json:"login_ip_region"`
	IsLoginExceptional bool   `json:"is_login_exceptional"`
	Platform           string `json:"platform"`
	UserAgent          string `json:"user_agent"`
}

func (q *Queries) AddUserLoginLog(ctx context.Context, arg *AddUserLoginLogParams) (UserLoginLog, error) {
	row := q.db.QueryRow(ctx, addUserLoginLog,
		arg.UserID,
		arg.LoginIp,
		arg.LoginIpRegion,
		arg.IsLoginExceptional,
		arg.Platform,
		arg.UserAgent,
	)
	var i UserLoginLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoginTime,
		&i.LoginIp,
		&i.LoginIpRegion,
		&i.IsLoginExceptional,
		&i.Platform,
		&i.UserAgent,
	)
	return i, err
}

const getLastUserLoginLog = `-- name: GetLastUserLoginLog :one
SELECT id, user_id, login_time, login_ip, login_ip_region, is_login_exceptional, platform, user_agent FROM user_login_logs
WHERE user_id = $1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastUserLoginLog(ctx context.Context, userID int32) (UserLoginLog, error) {
	row := q.db.QueryRow(ctx, getLastUserLoginLog, userID)
	var i UserLoginLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoginTime,
		&i.LoginIp,
		&i.LoginIpRegion,
		&i.IsLoginExceptional,
		&i.Platform,
		&i.UserAgent,
	)
	return i, err
}

const updateLastUserLoginLog = `-- name: UpdateLastUserLoginLog :exec
UPDATE user_login_logs
SET
    is_login_exceptional = true
WHERE
	id = (
            SELECT id FROM user_login_logs 
            WHERE user_login_logs.user_id = $1 AND NOT is_login_exceptional 
            ORDER BY id DESC 
            LIMIT 1
        )
`

func (q *Queries) UpdateLastUserLoginLog(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, updateLastUserLoginLog, userID)
	return err
}
