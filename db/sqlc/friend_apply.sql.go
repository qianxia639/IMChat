// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friend_apply.sql

package db

import (
	"context"
	"time"
)

const createFriendApply = `-- name: CreateFriendApply :one
INSERT INTO friend_apply(
    apply_id, reply_id, apply_desc, note
) VALUES (
    $1, $2, $3, $4
) RETURNING apply_id, reply_id, apply_desc, note, created_at
`

type CreateFriendApplyParams struct {
	ApplyID   int32  `json:"apply_id"`
	ReplyID   int32  `json:"reply_id"`
	ApplyDesc string `json:"apply_desc"`
	Note      string `json:"note"`
}

func (q *Queries) CreateFriendApply(ctx context.Context, arg *CreateFriendApplyParams) (FriendApply, error) {
	row := q.db.QueryRow(ctx, createFriendApply,
		arg.ApplyID,
		arg.ReplyID,
		arg.ApplyDesc,
		arg.Note,
	)
	var i FriendApply
	err := row.Scan(
		&i.ApplyID,
		&i.ReplyID,
		&i.ApplyDesc,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendApply = `-- name: DeleteFriendApply :exec
DELETE FROM friend_apply 
WHERE apply_id = $1 AND reply_id = $2
`

type DeleteFriendApplyParams struct {
	ApplyID int32 `json:"apply_id"`
	ReplyID int32 `json:"reply_id"`
}

func (q *Queries) DeleteFriendApply(ctx context.Context, arg *DeleteFriendApplyParams) error {
	_, err := q.db.Exec(ctx, deleteFriendApply, arg.ApplyID, arg.ReplyID)
	return err
}

const getFriendApply = `-- name: GetFriendApply :one
SELECT apply_id, reply_id, apply_desc, note, created_at FROM friend_apply
WHERE apply_id = $1 AND reply_id = $2
`

type GetFriendApplyParams struct {
	ApplyID int32 `json:"apply_id"`
	ReplyID int32 `json:"reply_id"`
}

func (q *Queries) GetFriendApply(ctx context.Context, arg *GetFriendApplyParams) (FriendApply, error) {
	row := q.db.QueryRow(ctx, getFriendApply, arg.ApplyID, arg.ReplyID)
	var i FriendApply
	err := row.Scan(
		&i.ApplyID,
		&i.ReplyID,
		&i.ApplyDesc,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listFriendApply = `-- name: ListFriendApply :many
SELECt 
    fp.apply_id, u.nickname, fp.apply_desc, fp.created_at
FROM friend_apply AS fp
JOIN users AS u ON fp.apply_id = u.id AND fp.reply_id = $1
`

type ListFriendApplyRow struct {
	ApplyID   int32     `json:"apply_id"`
	Nickname  string    `json:"nickname"`
	ApplyDesc string    `json:"apply_desc"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListFriendApply(ctx context.Context, replyID int32) ([]ListFriendApplyRow, error) {
	rows, err := q.db.Query(ctx, listFriendApply, replyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFriendApplyRow
	for rows.Next() {
		var i ListFriendApplyRow
		if err := rows.Scan(
			&i.ApplyID,
			&i.Nickname,
			&i.ApplyDesc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
