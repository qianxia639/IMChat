// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password, nickname, email
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, nickname, password, email, gender, profile_picture_url, status, password_changed_at, last_login_at, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Nickname string `json:"nickname"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Nickname,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Gender,
		&i.ProfilePictureUrl,
		&i.Status,
		&i.PasswordChangedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const existEmail = `-- name: ExistEmail :one
SELECT COUNT(*) FROM users
WHERE email = $1
`

func (q *Queries) ExistEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, existEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const existNickname = `-- name: ExistNickname :one
SELECT COUNT(*) FROM users
WHERE nickname = $1
`

func (q *Queries) ExistNickname(ctx context.Context, nickname string) (int64, error) {
	row := q.db.QueryRow(ctx, existNickname, nickname)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, nickname, password, email, gender, profile_picture_url, status, password_changed_at, last_login_at, created_at, updated_at FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Gender,
		&i.ProfilePictureUrl,
		&i.Status,
		&i.PasswordChangedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    nickname = COALESCE($1, nickname),
    gender = COALESCE($2, gender),
    status = COALESCE($3, status),
    last_login_at = COALESCE($4, last_login_at),
    updated_at = $5
WHERE
    username = $6
RETURNING id, username, nickname, password, email, gender, profile_picture_url, status, password_changed_at, last_login_at, created_at, updated_at
`

type UpdateUserParams struct {
	Nickname    pgtype.Text        `json:"nickname"`
	Gender      pgtype.Int2        `json:"gender"`
	Status      pgtype.Int2        `json:"status"`
	LastLoginAt pgtype.Timestamptz `json:"last_login_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
	Username    string             `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Nickname,
		arg.Gender,
		arg.Status,
		arg.LastLoginAt,
		arg.UpdatedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Gender,
		&i.ProfilePictureUrl,
		&i.Status,
		&i.PasswordChangedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password = $1,
    password_changed_at = $2,
    updated_at = $3
WHERE
    username = $4
`

type UpdateUserPasswordParams struct {
	Password          string    `json:"password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	Username          string    `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg *UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword,
		arg.Password,
		arg.PasswordChangedAt,
		arg.UpdatedAt,
		arg.Username,
	)
	return err
}
