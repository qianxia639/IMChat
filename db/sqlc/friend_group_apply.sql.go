// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friend_group_apply.sql

package db

import (
	"context"
	"time"
)

const createFriendGroupApply = `-- name: CreateFriendGroupApply :one
INSERT INTO friend_group_applys(
    user_id, target_id, description, apply_type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, target_id, description, apply_type, status, created_at, updated_at
`

type CreateFriendGroupApplyParams struct {
	UserID      int32  `json:"user_id"`
	TargetID    int32  `json:"target_id"`
	Description string `json:"description"`
	ApplyType   int16  `json:"apply_type"`
}

func (q *Queries) CreateFriendGroupApply(ctx context.Context, arg *CreateFriendGroupApplyParams) (FriendGroupApply, error) {
	row := q.db.QueryRow(ctx, createFriendGroupApply,
		arg.UserID,
		arg.TargetID,
		arg.Description,
		arg.ApplyType,
	)
	var i FriendGroupApply
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TargetID,
		&i.Description,
		&i.ApplyType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFriendGroupApply = `-- name: DeleteFriendGroupApply :exec
DELETE FROM friend_group_applys
WHERE user_id = $1 OR target_id = $1
`

func (q *Queries) DeleteFriendGroupApply(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteFriendGroupApply, userID)
	return err
}

const existsFriendGroupApply = `-- name: ExistsFriendGroupApply :one
SELECT COUNT(*) FROM friend_group_applys
WHERE
    user_id = $1 AND target_id = $2 AND status = 1 AND apply_type = $3
`

type ExistsFriendGroupApplyParams struct {
	UserID    int32 `json:"user_id"`
	TargetID  int32 `json:"target_id"`
	ApplyType int16 `json:"apply_type"`
}

func (q *Queries) ExistsFriendGroupApply(ctx context.Context, arg *ExistsFriendGroupApplyParams) (int64, error) {
	row := q.db.QueryRow(ctx, existsFriendGroupApply, arg.UserID, arg.TargetID, arg.ApplyType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFriendGroupApply = `-- name: ListFriendGroupApply :many
SELECT fca.user_id, u.nickname, fca.description,  fca.apply_type, fca.created_at
FROM friend_group_applys fca
JOIN users u ON fca.user_id = u.id
WHERE fca.target_id = $1 AND fca.status = 1
`

type ListFriendGroupApplyRow struct {
	UserID      int32     `json:"user_id"`
	Nickname    string    `json:"nickname"`
	Description string    `json:"description"`
	ApplyType   int16     `json:"apply_type"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListFriendGroupApply(ctx context.Context, targetID int32) ([]ListFriendGroupApplyRow, error) {
	rows, err := q.db.Query(ctx, listFriendGroupApply, targetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFriendGroupApplyRow
	for rows.Next() {
		var i ListFriendGroupApplyRow
		if err := rows.Scan(
			&i.UserID,
			&i.Nickname,
			&i.Description,
			&i.ApplyType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendGroupApply = `-- name: UpdateFriendGroupApply :exec
UPDATE friend_group_applys
SET
    status = $1,
    updated_at = now()
WHERE 
    (user_id = $2 AND target_id = $3 AND status = 1 AND apply_type = $4)
    OR
    (user_id = $3 AND target_id = $2 AND status = 1 AND apply_type = $4)
`

type UpdateFriendGroupApplyParams struct {
	Status    int16 `json:"status"`
	UserID    int32 `json:"user_id"`
	TargetID  int32 `json:"target_id"`
	ApplyType int16 `json:"apply_type"`
}

func (q *Queries) UpdateFriendGroupApply(ctx context.Context, arg *UpdateFriendGroupApplyParams) error {
	_, err := q.db.Exec(ctx, updateFriendGroupApply,
		arg.Status,
		arg.UserID,
		arg.TargetID,
		arg.ApplyType,
	)
	return err
}
