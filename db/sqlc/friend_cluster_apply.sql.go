// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friend_cluster_apply.sql

package db

import (
	"context"
)

const createFriendClsuterApply = `-- name: CreateFriendClsuterApply :one
INSERT INTO friend_cluster_apply(
    apply_id, receiver_id, apply_desc, flag
) VALUES (
    $1, $2, $3, $4
) RETURNING id, apply_id, receiver_id, apply_desc, status, flag, apply_time, response_time
`

type CreateFriendClsuterApplyParams struct {
	ApplyID    int32  `json:"apply_id"`
	ReceiverID int32  `json:"receiver_id"`
	ApplyDesc  string `json:"apply_desc"`
	Flag       int16  `json:"flag"`
}

func (q *Queries) CreateFriendClsuterApply(ctx context.Context, arg *CreateFriendClsuterApplyParams) (FriendClusterApply, error) {
	row := q.db.QueryRow(ctx, createFriendClsuterApply,
		arg.ApplyID,
		arg.ReceiverID,
		arg.ApplyDesc,
		arg.Flag,
	)
	var i FriendClusterApply
	err := row.Scan(
		&i.ID,
		&i.ApplyID,
		&i.ReceiverID,
		&i.ApplyDesc,
		&i.Status,
		&i.Flag,
		&i.ApplyTime,
		&i.ResponseTime,
	)
	return i, err
}

const existsFriendClusterApply = `-- name: ExistsFriendClusterApply :one
SELECT COUNT(*) FROM friend_cluster_apply
WHERE
    apply_id = $1 AND receiver_id = $2 AND status = 0 AND flag = $3
`

type ExistsFriendClusterApplyParams struct {
	ApplyID    int32 `json:"apply_id"`
	ReceiverID int32 `json:"receiver_id"`
	Flag       int16 `json:"flag"`
}

func (q *Queries) ExistsFriendClusterApply(ctx context.Context, arg *ExistsFriendClusterApplyParams) (int64, error) {
	row := q.db.QueryRow(ctx, existsFriendClusterApply, arg.ApplyID, arg.ReceiverID, arg.Flag)
	var count int64
	err := row.Scan(&count)
	return count, err
}
