// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friend_group_rapply.sql

package db

import (
	"context"
	"time"
)

const createFriendGroupApply = `-- name: CreateFriendGroupApply :one
INSERT INTO friend_group_applys(
    sender_id, receiver_id, apply_desc, apply_type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, sender_id, receiver_id, apply_desc, status, apply_type, apply_time, reply_time
`

type CreateFriendGroupApplyParams struct {
	SenderID   int32  `json:"sender_id"`
	ReceiverID int32  `json:"receiver_id"`
	ApplyDesc  string `json:"apply_desc"`
	ApplyType  int16  `json:"apply_type"`
}

func (q *Queries) CreateFriendGroupApply(ctx context.Context, arg *CreateFriendGroupApplyParams) (FriendGroupApply, error) {
	row := q.db.QueryRow(ctx, createFriendGroupApply,
		arg.SenderID,
		arg.ReceiverID,
		arg.ApplyDesc,
		arg.ApplyType,
	)
	var i FriendGroupApply
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.ApplyDesc,
		&i.Status,
		&i.ApplyType,
		&i.ApplyTime,
		&i.ReplyTime,
	)
	return i, err
}

const deleteFriendGroupApply = `-- name: DeleteFriendGroupApply :exec
DELETE FROM friend_group_applys
WHERE sender_id = $1 OR receiver_id = $1
`

func (q *Queries) DeleteFriendGroupApply(ctx context.Context, senderID int32) error {
	_, err := q.db.Exec(ctx, deleteFriendGroupApply, senderID)
	return err
}

const existsFriendGroupApply = `-- name: ExistsFriendGroupApply :one
SELECT COUNT(*) FROM friend_group_applys
WHERE
    sender_id = $1 AND receiver_id = $2 AND status = 0 AND apply_type = $3
`

type ExistsFriendGroupApplyParams struct {
	SenderID   int32 `json:"sender_id"`
	ReceiverID int32 `json:"receiver_id"`
	ApplyType  int16 `json:"apply_type"`
}

func (q *Queries) ExistsFriendGroupApply(ctx context.Context, arg *ExistsFriendGroupApplyParams) (int64, error) {
	row := q.db.QueryRow(ctx, existsFriendGroupApply, arg.SenderID, arg.ReceiverID, arg.ApplyType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFriendGroupApply = `-- name: ListFriendGroupApply :many
SELECT fca.sender_id, u.nickname, fca.apply_desc,  fca.apply_type, fca.apply_time
FROM friend_group_applys fca
JOIN users u ON fca.sender_id = u.id
WHERE fca.receiver_id = $1 AND fca.status = 0
`

type ListFriendGroupApplyRow struct {
	SenderID  int32     `json:"sender_id"`
	Nickname  string    `json:"nickname"`
	ApplyDesc string    `json:"apply_desc"`
	ApplyType int16     `json:"apply_type"`
	ApplyTime time.Time `json:"apply_time"`
}

func (q *Queries) ListFriendGroupApply(ctx context.Context, receiverID int32) ([]ListFriendGroupApplyRow, error) {
	rows, err := q.db.Query(ctx, listFriendGroupApply, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFriendGroupApplyRow
	for rows.Next() {
		var i ListFriendGroupApplyRow
		if err := rows.Scan(
			&i.SenderID,
			&i.Nickname,
			&i.ApplyDesc,
			&i.ApplyType,
			&i.ApplyTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendGroupApply = `-- name: UpdateFriendGroupApply :exec
UPDATE friend_group_applys
SET
    status = $1,
    reply_time = now()
WHERE 
    (sender_id = $2 AND receiver_id = $3 AND status = 0 AND apply_type = $4)
    OR
    (sender_id = $3 AND receiver_id = $2 AND status = 0 AND apply_type = $4)
`

type UpdateFriendGroupApplyParams struct {
	Status     int16 `json:"status"`
	SenderID   int32 `json:"sender_id"`
	ReceiverID int32 `json:"receiver_id"`
	ApplyType  int16 `json:"apply_type"`
}

func (q *Queries) UpdateFriendGroupApply(ctx context.Context, arg *UpdateFriendGroupApplyParams) error {
	_, err := q.db.Exec(ctx, updateFriendGroupApply,
		arg.Status,
		arg.SenderID,
		arg.ReceiverID,
		arg.ApplyType,
	)
	return err
}
