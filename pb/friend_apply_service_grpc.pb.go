// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: friend_apply_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendApplyServiceClient is the client API for FriendApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendApplyServiceClient interface {
	CreateFriendApply(ctx context.Context, in *CreateFriendApplyRequest, opts ...grpc.CallOption) (*CreateFriendApplyResponse, error)
	ListFriendApply(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (FriendApplyService_ListFriendApplyClient, error)
}

type friendApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendApplyServiceClient(cc grpc.ClientConnInterface) FriendApplyServiceClient {
	return &friendApplyServiceClient{cc}
}

func (c *friendApplyServiceClient) CreateFriendApply(ctx context.Context, in *CreateFriendApplyRequest, opts ...grpc.CallOption) (*CreateFriendApplyResponse, error) {
	out := new(CreateFriendApplyResponse)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendApplyService/CreateFriendApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendApplyServiceClient) ListFriendApply(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (FriendApplyService_ListFriendApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FriendApplyService_ServiceDesc.Streams[0], "/qianxia.IMChat.FriendApplyService/ListFriendApply", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendApplyServiceListFriendApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FriendApplyService_ListFriendApplyClient interface {
	Recv() (*ListFriendApplyResponse, error)
	grpc.ClientStream
}

type friendApplyServiceListFriendApplyClient struct {
	grpc.ClientStream
}

func (x *friendApplyServiceListFriendApplyClient) Recv() (*ListFriendApplyResponse, error) {
	m := new(ListFriendApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriendApplyServiceServer is the server API for FriendApplyService service.
// All implementations must embed UnimplementedFriendApplyServiceServer
// for forward compatibility
type FriendApplyServiceServer interface {
	CreateFriendApply(context.Context, *CreateFriendApplyRequest) (*CreateFriendApplyResponse, error)
	ListFriendApply(*EmptyRequest, FriendApplyService_ListFriendApplyServer) error
	mustEmbedUnimplementedFriendApplyServiceServer()
}

// UnimplementedFriendApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendApplyServiceServer struct {
}

func (UnimplementedFriendApplyServiceServer) CreateFriendApply(context.Context, *CreateFriendApplyRequest) (*CreateFriendApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendApply not implemented")
}
func (UnimplementedFriendApplyServiceServer) ListFriendApply(*EmptyRequest, FriendApplyService_ListFriendApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFriendApply not implemented")
}
func (UnimplementedFriendApplyServiceServer) mustEmbedUnimplementedFriendApplyServiceServer() {}

// UnsafeFriendApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendApplyServiceServer will
// result in compilation errors.
type UnsafeFriendApplyServiceServer interface {
	mustEmbedUnimplementedFriendApplyServiceServer()
}

func RegisterFriendApplyServiceServer(s grpc.ServiceRegistrar, srv FriendApplyServiceServer) {
	s.RegisterService(&FriendApplyService_ServiceDesc, srv)
}

func _FriendApplyService_CreateFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendApplyServiceServer).CreateFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendApplyService/CreateFriendApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendApplyServiceServer).CreateFriendApply(ctx, req.(*CreateFriendApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendApplyService_ListFriendApply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendApplyServiceServer).ListFriendApply(m, &friendApplyServiceListFriendApplyServer{stream})
}

type FriendApplyService_ListFriendApplyServer interface {
	Send(*ListFriendApplyResponse) error
	grpc.ServerStream
}

type friendApplyServiceListFriendApplyServer struct {
	grpc.ServerStream
}

func (x *friendApplyServiceListFriendApplyServer) Send(m *ListFriendApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FriendApplyService_ServiceDesc is the grpc.ServiceDesc for FriendApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qianxia.IMChat.FriendApplyService",
	HandlerType: (*FriendApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendApply",
			Handler:    _FriendApplyService_CreateFriendApply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFriendApply",
			Handler:       _FriendApplyService_ListFriendApply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "friend_apply_service.proto",
}
