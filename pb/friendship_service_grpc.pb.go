// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: friendship_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendshipServiceClient is the client API for FriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipServiceClient interface {
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateFriend(ctx context.Context, in *UpdateFriendRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*Response, error)
	ListFriends(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FriendshipService_ListFriendsClient, error)
}

type friendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipServiceClient(cc grpc.ClientConnInterface) FriendshipServiceClient {
	return &friendshipServiceClient{cc}
}

func (c *friendshipServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendshipService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) UpdateFriend(ctx context.Context, in *UpdateFriendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendshipService/UpdateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendshipService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) ListFriends(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FriendshipService_ListFriendsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FriendshipService_ServiceDesc.Streams[0], "/qianxia.IMChat.FriendshipService/ListFriends", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendshipServiceListFriendsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FriendshipService_ListFriendsClient interface {
	Recv() (*ListFriendsResponse, error)
	grpc.ClientStream
}

type friendshipServiceListFriendsClient struct {
	grpc.ClientStream
}

func (x *friendshipServiceListFriendsClient) Recv() (*ListFriendsResponse, error) {
	m := new(ListFriendsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriendshipServiceServer is the server API for FriendshipService service.
// All implementations must embed UnimplementedFriendshipServiceServer
// for forward compatibility
type FriendshipServiceServer interface {
	AddFriend(context.Context, *AddFriendRequest) (*Response, error)
	UpdateFriend(context.Context, *UpdateFriendRequest) (*Response, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*Response, error)
	ListFriends(*emptypb.Empty, FriendshipService_ListFriendsServer) error
	mustEmbedUnimplementedFriendshipServiceServer()
}

// UnimplementedFriendshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendshipServiceServer struct {
}

func (UnimplementedFriendshipServiceServer) AddFriend(context.Context, *AddFriendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) UpdateFriend(context.Context, *UpdateFriendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) ListFriends(*emptypb.Empty, FriendshipService_ListFriendsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFriends not implemented")
}
func (UnimplementedFriendshipServiceServer) mustEmbedUnimplementedFriendshipServiceServer() {}

// UnsafeFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServiceServer will
// result in compilation errors.
type UnsafeFriendshipServiceServer interface {
	mustEmbedUnimplementedFriendshipServiceServer()
}

func RegisterFriendshipServiceServer(s grpc.ServiceRegistrar, srv FriendshipServiceServer) {
	s.RegisterService(&FriendshipService_ServiceDesc, srv)
}

func _FriendshipService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendshipService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_UpdateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).UpdateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendshipService/UpdateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).UpdateFriend(ctx, req.(*UpdateFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendshipService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_ListFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendshipServiceServer).ListFriends(m, &friendshipServiceListFriendsServer{stream})
}

type FriendshipService_ListFriendsServer interface {
	Send(*ListFriendsResponse) error
	grpc.ServerStream
}

type friendshipServiceListFriendsServer struct {
	grpc.ServerStream
}

func (x *friendshipServiceListFriendsServer) Send(m *ListFriendsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FriendshipService_ServiceDesc is the grpc.ServiceDesc for FriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qianxia.IMChat.FriendshipService",
	HandlerType: (*FriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _FriendshipService_AddFriend_Handler,
		},
		{
			MethodName: "UpdateFriend",
			Handler:    _FriendshipService_UpdateFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _FriendshipService_DeleteFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFriends",
			Handler:       _FriendshipService_ListFriends_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "friendship_service.proto",
}
