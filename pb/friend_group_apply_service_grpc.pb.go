// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: friend_group_apply_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendGroupApplyServiceClient is the client API for FriendGroupApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendGroupApplyServiceClient interface {
	CreateFriendGroupApply(ctx context.Context, in *CreateFriendGroupApplyRequest, opts ...grpc.CallOption) (*Response, error)
	ReplyFriendGroupApply(ctx context.Context, in *ReplyFriendGroupApplyRequest, opts ...grpc.CallOption) (*Response, error)
	ListFriendGroupApply(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FriendGroupApplyService_ListFriendGroupApplyClient, error)
}

type friendGroupApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendGroupApplyServiceClient(cc grpc.ClientConnInterface) FriendGroupApplyServiceClient {
	return &friendGroupApplyServiceClient{cc}
}

func (c *friendGroupApplyServiceClient) CreateFriendGroupApply(ctx context.Context, in *CreateFriendGroupApplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendGroupApplyService/CreateFriendGroupApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendGroupApplyServiceClient) ReplyFriendGroupApply(ctx context.Context, in *ReplyFriendGroupApplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendGroupApplyService/ReplyFriendGroupApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendGroupApplyServiceClient) ListFriendGroupApply(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FriendGroupApplyService_ListFriendGroupApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FriendGroupApplyService_ServiceDesc.Streams[0], "/qianxia.IMChat.FriendGroupApplyService/ListFriendGroupApply", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendGroupApplyServiceListFriendGroupApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FriendGroupApplyService_ListFriendGroupApplyClient interface {
	Recv() (*ListFriendGroupApplyResponse, error)
	grpc.ClientStream
}

type friendGroupApplyServiceListFriendGroupApplyClient struct {
	grpc.ClientStream
}

func (x *friendGroupApplyServiceListFriendGroupApplyClient) Recv() (*ListFriendGroupApplyResponse, error) {
	m := new(ListFriendGroupApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriendGroupApplyServiceServer is the server API for FriendGroupApplyService service.
// All implementations must embed UnimplementedFriendGroupApplyServiceServer
// for forward compatibility
type FriendGroupApplyServiceServer interface {
	CreateFriendGroupApply(context.Context, *CreateFriendGroupApplyRequest) (*Response, error)
	ReplyFriendGroupApply(context.Context, *ReplyFriendGroupApplyRequest) (*Response, error)
	ListFriendGroupApply(*emptypb.Empty, FriendGroupApplyService_ListFriendGroupApplyServer) error
	mustEmbedUnimplementedFriendGroupApplyServiceServer()
}

// UnimplementedFriendGroupApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendGroupApplyServiceServer struct {
}

func (UnimplementedFriendGroupApplyServiceServer) CreateFriendGroupApply(context.Context, *CreateFriendGroupApplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendGroupApply not implemented")
}
func (UnimplementedFriendGroupApplyServiceServer) ReplyFriendGroupApply(context.Context, *ReplyFriendGroupApplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyFriendGroupApply not implemented")
}
func (UnimplementedFriendGroupApplyServiceServer) ListFriendGroupApply(*emptypb.Empty, FriendGroupApplyService_ListFriendGroupApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFriendGroupApply not implemented")
}
func (UnimplementedFriendGroupApplyServiceServer) mustEmbedUnimplementedFriendGroupApplyServiceServer() {
}

// UnsafeFriendGroupApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendGroupApplyServiceServer will
// result in compilation errors.
type UnsafeFriendGroupApplyServiceServer interface {
	mustEmbedUnimplementedFriendGroupApplyServiceServer()
}

func RegisterFriendGroupApplyServiceServer(s grpc.ServiceRegistrar, srv FriendGroupApplyServiceServer) {
	s.RegisterService(&FriendGroupApplyService_ServiceDesc, srv)
}

func _FriendGroupApplyService_CreateFriendGroupApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendGroupApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendGroupApplyServiceServer).CreateFriendGroupApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendGroupApplyService/CreateFriendGroupApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendGroupApplyServiceServer).CreateFriendGroupApply(ctx, req.(*CreateFriendGroupApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendGroupApplyService_ReplyFriendGroupApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyFriendGroupApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendGroupApplyServiceServer).ReplyFriendGroupApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendGroupApplyService/ReplyFriendGroupApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendGroupApplyServiceServer).ReplyFriendGroupApply(ctx, req.(*ReplyFriendGroupApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendGroupApplyService_ListFriendGroupApply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendGroupApplyServiceServer).ListFriendGroupApply(m, &friendGroupApplyServiceListFriendGroupApplyServer{stream})
}

type FriendGroupApplyService_ListFriendGroupApplyServer interface {
	Send(*ListFriendGroupApplyResponse) error
	grpc.ServerStream
}

type friendGroupApplyServiceListFriendGroupApplyServer struct {
	grpc.ServerStream
}

func (x *friendGroupApplyServiceListFriendGroupApplyServer) Send(m *ListFriendGroupApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FriendGroupApplyService_ServiceDesc is the grpc.ServiceDesc for FriendGroupApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendGroupApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qianxia.IMChat.FriendGroupApplyService",
	HandlerType: (*FriendGroupApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendGroupApply",
			Handler:    _FriendGroupApplyService_CreateFriendGroupApply_Handler,
		},
		{
			MethodName: "ReplyFriendGroupApply",
			Handler:    _FriendGroupApplyService_ReplyFriendGroupApply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFriendGroupApply",
			Handler:       _FriendGroupApplyService_ListFriendGroupApply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "friend_group_apply_service.proto",
}
