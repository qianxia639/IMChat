// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: message_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SenderMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_SenderMessageClient, error)
	ReceiverMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_ReceiverMessageClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SenderMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_SenderMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/qianxia.IMChat.MessageService/SenderMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSenderMessageClient{stream}
	return x, nil
}

type MessageService_SenderMessageClient interface {
	Send(*SenderMessageRequest) error
	Recv() (*SenderMessageResponse, error)
	grpc.ClientStream
}

type messageServiceSenderMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceSenderMessageClient) Send(m *SenderMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceSenderMessageClient) Recv() (*SenderMessageResponse, error) {
	m := new(SenderMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) ReceiverMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_ReceiverMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/qianxia.IMChat.MessageService/ReceiverMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceReceiverMessageClient{stream}
	return x, nil
}

type MessageService_ReceiverMessageClient interface {
	Send(*SenderMessageResponse) error
	Recv() (*ReceiverMessageRequest, error)
	grpc.ClientStream
}

type messageServiceReceiverMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceReceiverMessageClient) Send(m *SenderMessageResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceReceiverMessageClient) Recv() (*ReceiverMessageRequest, error) {
	m := new(ReceiverMessageRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SenderMessage(MessageService_SenderMessageServer) error
	ReceiverMessage(MessageService_ReceiverMessageServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SenderMessage(MessageService_SenderMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SenderMessage not implemented")
}
func (UnimplementedMessageServiceServer) ReceiverMessage(MessageService_ReceiverMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiverMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SenderMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).SenderMessage(&messageServiceSenderMessageServer{stream})
}

type MessageService_SenderMessageServer interface {
	Send(*SenderMessageResponse) error
	Recv() (*SenderMessageRequest, error)
	grpc.ServerStream
}

type messageServiceSenderMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceSenderMessageServer) Send(m *SenderMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceSenderMessageServer) Recv() (*SenderMessageRequest, error) {
	m := new(SenderMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_ReceiverMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).ReceiverMessage(&messageServiceReceiverMessageServer{stream})
}

type MessageService_ReceiverMessageServer interface {
	Send(*ReceiverMessageRequest) error
	Recv() (*SenderMessageResponse, error)
	grpc.ServerStream
}

type messageServiceReceiverMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceReceiverMessageServer) Send(m *ReceiverMessageRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceReceiverMessageServer) Recv() (*SenderMessageResponse, error) {
	m := new(SenderMessageResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qianxia.IMChat.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SenderMessage",
			Handler:       _MessageService_SenderMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiverMessage",
			Handler:       _MessageService_ReceiverMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message_service.proto",
}
