// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: friend_cluster_apply_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendClusterApplyServiceClient is the client API for FriendClusterApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendClusterApplyServiceClient interface {
	CreateFriendClusterApply(ctx context.Context, in *CreateFriendClusterApplyRequest, opts ...grpc.CallOption) (*CreateFriendClusterApplyResponse, error)
	ReplyFriendClusterApply(ctx context.Context, in *ReplyFriendClusterApplyRequest, opts ...grpc.CallOption) (*ReplyFriendClusterApplyResponse, error)
	ListFriendClusterApply(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (FriendClusterApplyService_ListFriendClusterApplyClient, error)
}

type friendClusterApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClusterApplyServiceClient(cc grpc.ClientConnInterface) FriendClusterApplyServiceClient {
	return &friendClusterApplyServiceClient{cc}
}

func (c *friendClusterApplyServiceClient) CreateFriendClusterApply(ctx context.Context, in *CreateFriendClusterApplyRequest, opts ...grpc.CallOption) (*CreateFriendClusterApplyResponse, error) {
	out := new(CreateFriendClusterApplyResponse)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendClusterApplyService/CreateFriendClusterApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClusterApplyServiceClient) ReplyFriendClusterApply(ctx context.Context, in *ReplyFriendClusterApplyRequest, opts ...grpc.CallOption) (*ReplyFriendClusterApplyResponse, error) {
	out := new(ReplyFriendClusterApplyResponse)
	err := c.cc.Invoke(ctx, "/qianxia.IMChat.FriendClusterApplyService/ReplyFriendClusterApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClusterApplyServiceClient) ListFriendClusterApply(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (FriendClusterApplyService_ListFriendClusterApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FriendClusterApplyService_ServiceDesc.Streams[0], "/qianxia.IMChat.FriendClusterApplyService/ListFriendClusterApply", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendClusterApplyServiceListFriendClusterApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FriendClusterApplyService_ListFriendClusterApplyClient interface {
	Recv() (*ListFriendClusterApplyResponse, error)
	grpc.ClientStream
}

type friendClusterApplyServiceListFriendClusterApplyClient struct {
	grpc.ClientStream
}

func (x *friendClusterApplyServiceListFriendClusterApplyClient) Recv() (*ListFriendClusterApplyResponse, error) {
	m := new(ListFriendClusterApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriendClusterApplyServiceServer is the server API for FriendClusterApplyService service.
// All implementations must embed UnimplementedFriendClusterApplyServiceServer
// for forward compatibility
type FriendClusterApplyServiceServer interface {
	CreateFriendClusterApply(context.Context, *CreateFriendClusterApplyRequest) (*CreateFriendClusterApplyResponse, error)
	ReplyFriendClusterApply(context.Context, *ReplyFriendClusterApplyRequest) (*ReplyFriendClusterApplyResponse, error)
	ListFriendClusterApply(*EmptyRequest, FriendClusterApplyService_ListFriendClusterApplyServer) error
	mustEmbedUnimplementedFriendClusterApplyServiceServer()
}

// UnimplementedFriendClusterApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendClusterApplyServiceServer struct {
}

func (UnimplementedFriendClusterApplyServiceServer) CreateFriendClusterApply(context.Context, *CreateFriendClusterApplyRequest) (*CreateFriendClusterApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendClusterApply not implemented")
}
func (UnimplementedFriendClusterApplyServiceServer) ReplyFriendClusterApply(context.Context, *ReplyFriendClusterApplyRequest) (*ReplyFriendClusterApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyFriendClusterApply not implemented")
}
func (UnimplementedFriendClusterApplyServiceServer) ListFriendClusterApply(*EmptyRequest, FriendClusterApplyService_ListFriendClusterApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFriendClusterApply not implemented")
}
func (UnimplementedFriendClusterApplyServiceServer) mustEmbedUnimplementedFriendClusterApplyServiceServer() {
}

// UnsafeFriendClusterApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendClusterApplyServiceServer will
// result in compilation errors.
type UnsafeFriendClusterApplyServiceServer interface {
	mustEmbedUnimplementedFriendClusterApplyServiceServer()
}

func RegisterFriendClusterApplyServiceServer(s grpc.ServiceRegistrar, srv FriendClusterApplyServiceServer) {
	s.RegisterService(&FriendClusterApplyService_ServiceDesc, srv)
}

func _FriendClusterApplyService_CreateFriendClusterApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendClusterApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendClusterApplyServiceServer).CreateFriendClusterApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendClusterApplyService/CreateFriendClusterApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendClusterApplyServiceServer).CreateFriendClusterApply(ctx, req.(*CreateFriendClusterApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendClusterApplyService_ReplyFriendClusterApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyFriendClusterApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendClusterApplyServiceServer).ReplyFriendClusterApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qianxia.IMChat.FriendClusterApplyService/ReplyFriendClusterApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendClusterApplyServiceServer).ReplyFriendClusterApply(ctx, req.(*ReplyFriendClusterApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendClusterApplyService_ListFriendClusterApply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendClusterApplyServiceServer).ListFriendClusterApply(m, &friendClusterApplyServiceListFriendClusterApplyServer{stream})
}

type FriendClusterApplyService_ListFriendClusterApplyServer interface {
	Send(*ListFriendClusterApplyResponse) error
	grpc.ServerStream
}

type friendClusterApplyServiceListFriendClusterApplyServer struct {
	grpc.ServerStream
}

func (x *friendClusterApplyServiceListFriendClusterApplyServer) Send(m *ListFriendClusterApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FriendClusterApplyService_ServiceDesc is the grpc.ServiceDesc for FriendClusterApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendClusterApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qianxia.IMChat.FriendClusterApplyService",
	HandlerType: (*FriendClusterApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendClusterApply",
			Handler:    _FriendClusterApplyService_CreateFriendClusterApply_Handler,
		},
		{
			MethodName: "ReplyFriendClusterApply",
			Handler:    _FriendClusterApplyService_ReplyFriendClusterApply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFriendClusterApply",
			Handler:       _FriendClusterApplyService_ListFriendClusterApply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "friend_cluster_apply_service.proto",
}
